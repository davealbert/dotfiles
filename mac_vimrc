execute pathogen#infect()


"g:multi_cursor_exit_from_insert_mode (Default: 1)
"g:multi_cursor_exit_from_visual_mode (Default: 1)
let g:multi_cursor_exit_from_insert_mode=0

"let $XIKI_DIR = "/Library/Ruby/Gems/1.8/gems/xiki-0.6.3"
"source $XIKI_DIR/etc/vim/xiki.vim

imap £ #
cmap £ #
map £ #

map <f7> :tabp<CR>
map <f8> :tabn<CR>

set hidden
set backup
set backupdir=~/.vim/backup
set directory=~/.vim/tmp
set spelllang=en_gb
" size of a hard tabstop
set tabstop=2

" size of an "indent"
set shiftwidth=2

" a combination of spaces and tabs are used to simulate tab stops at a width
" other than the (hard)tabstop
"set softtabstop=4

" always uses spaces instead of tab characters
set expandtab


" make "tab" insert indents instead of tabs at the beginning of a line
"set smarttab
"set smartindent


set number
map <C-l> :set nu!<CR>

"nnoremap <silent> <C-a> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>


set ai                  " auto indenting
set history=10000       " keep 100 lines of history
set ruler               " show the cursor position
set showcmd
set ignorecase
syntax on               " syntax highlighting
set hlsearch            " highlight the last searched term
:nnoremap // :nohlsearch<cr>

filetype plugin on      " use the file type plugins

" When editing a file, always jump to the last cursor position
autocmd BufReadPost *
\ if ! exists("g:leave_my_cursor_position_alone") |
\ if line("'\"") > 0 && line ("'\"") <= line("$") |
\ exe "normal g'\"" |
\ endif |
\ endif

" {{{1 GUI

if has('gui_running')
    set lines=70
    set columns=100
    set guioptions=cM
    set guicursor=a:blinkon0
    set cursorline

    if has("gui_win32")
        set guifont=Consolas:h10:cDEFAULT
    elseif has("gui_macvim")
        set guifont=Monaco:h12.00
        map <D-t> :CommandT<CR>
    endif

    if has('spell')
        set spell
        set spelllang=en_gb
        set spellfile=~/.vim/spell/spellfile.add
        set spellsuggest=best,10
    endif
endif

"FROM G.B.
set cursorline

"disable arrow keys
"map <up> :echo 'No!'<cr>
"map <down> :echo 'No!'<cr>
"map <left> :echo 'No!'<cr>
"map <right> :echo 'No!'<cr>
"imap <up> :echo 'No!'<cr>
"imap <down> :echo 'No!'<cr>
"imap <left> :echo 'No!'<cr>
"imap <right> :echo 'No!'<cr>

map <silent> <Up> :wincmd k<CR>
map <silent> <Down> :wincmd j<CR>
map <silent> <Left> :wincmd h<CR>
map <silent> <Right> :wincmd l<CR>

imap <silent> <Up> :wincmd k<CR>
imap <silent> <Down> :wincmd j<CR>
imap <silent> <Left> :wincmd h<CR>
imap <silent> <Right> :wincmd l<CR>


set shell=bash
"set shell=/bin/bash\ -i


"Lighter looking colors"
"set t_Co=8 " 256 colors
"set background=dark
color grb256
set t_Co=256
"color railscasts


set switchbuf=useopen
let mapleader=","
set showtabline=2
set cmdheight=2
syntax on

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RENAME CURRENT FILE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! RenameFile()
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction
map <leader>n :call RenameFile()<cr>



"Command-T
"  Ctrl-p to access
"     Ctrl-t to open in new tab
map <C-p> <Esc>:CommandT<CR>
imap <C-p> <Esc>:CommandT<CR>


inoremap jk <esc>
inoremap <esc> <esc>:echo 'No! Use: jk '<cr>i

" Insert the next charachter pressed and shift the rest of the line right
" <space><space>  would add one space.
nmap <Space> i_jkr



"Remove whitespace on save
autocmd BufWritePre *.py :%s/\s\+$//e
autocmd BufWritePre *.php :%s/\s\+$//e
autocmd BufWritePre *.html :%s/\s\+$//e
autocmd BufWritePre *.css :%s/\s\+$//e
autocmd BufWritePre *.js :%s/\s\+$//e
autocmd BufWritePre .*rc :%s/\s\+$//e
autocmd BufWritePre *.todo :%s/\s\+$//e
autocmd BufWritePre *.m :%s/\s\+$//e
autocmd BufWritePre *.h :%s/\s\+$//e
autocmd BufWritePre *.jade :%s/\s\+$//e
autocmd BufWritePre *.yml :%s/\s\+$//e

function! ToDoSettings()
    "map <Leader><Leader> :s/\[\s\]/\[x\]<cr>//A<space>\|<space><C-r>=strftime('%F')<CR>jk:w<cr>
    map <Leader><Leader> :s/\[\s\]/\[x\]<cr>//<CR>jk:w<cr>
    map <Leader>u :s/\[x\]/\[\ \]<cr>//<CR>jk:w<cr>
    setlocal ft=todo
endfunction

function! CodeLeaderSettings(langExe)
    execute "map <Leader><Leader> :w<cr>:!" . a:langExe . " %<cr>"
    execute "imap <Leader><Leader> jk:w<cr>:!" . a:langExe . " %<cr>"
endfunction

function! CppLeaderSetting()
    execute "map <Leader><Leader> :wa<cr>:!make<cr>"
    execute "imap <Leader><Leader> jk:wa<cr>:!make<cr>"
endfunction

au BufNewFile,BufRead *.php call CodeLeaderSettings("php")
au BufNewFile,BufRead *.rb call CodeLeaderSettings("ruby")
au BufNewFile,BufRead *.py call CodeLeaderSettings("python")
au BufNewFile,BufRead *.js call CodeLeaderSettings("node")
au BufNewFile,BufRead *.cpp call CppLeaderSetting()

au BufNewFile,BufRead *.todo call ToDoSettings()
au BufNewFile,BufRead *.txt call ToDoSettings()

au BufNewFile,BufRead *.scss set filetype=scss.css

if has("autocmd")
  filetype plugin indent on
endif

au BufNewFile,BufRead *.hbs set filetype=html
au BufNewFile,BufRead *.ejs set filetype=html

nmap <C-s> :setlocal spell!<CR>
"nmap <C-s> :w<CR>
"imap <c-s> <Esc>:w<CR>a
imap <C-s> <Esc><C-s>

"gorlf

map <Leader>t :tabnew<Enter>
map <Leader>w :close<Enter>

command! Browser :! open -a Google\ Chrome.app "%"

set wildmenu



"PhpUnit Testing
function! RunPhpUnitTest(...)
    :w
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;
    if a:0
        let file = a:1
        :exec '!phpunit ' . file
    else
        :!phpunit
    endif

endfunction

map <Leader>R :call RunPhpUnitTest()<cr>
map <Leader>r :call RunPhpUnitTest(@%)<cr>


cnoremap %% <C-R>=expand('%:h').'/'<cr>

map <Leader>a :!php artisan



"Bubble single lines (kicks butt)
""http://vimcasts.org/episodes/bubbling-text/
nmap <C-k> ddkP
nmap <C-j> ddp

"Bubble multiple lines
vmap <C-k> xkP`[V`]
vmap <C-j> xp`[V`]


set laststatus=2
"set statusline=%f\ -\ FileType:\ %y
set statusline=%<%f\ (%{&ft})\ %-4(%m%)%=%-19(%3l,%02c%03V%)
hi StatusLine ctermbg=Grey ctermfg=DarkGrey

"Much nicer filename autocompletion
"set wildmode=list:longest,list
set wildmode=longest:full,full


" Mac OS X  ( copy, Paste )
vmap <C-c> y:call system("pbcopy", getreg("\""))<CR>
nmap <C-v><C-v> :call setreg("\"",system("pbpaste"))<CR>p

" Save folds
autocmd BufWrite * mkview
autocmd BufRead * silent loadview

function! List_and_goto_buffers()
   exec ':buffers'
   call inputsave()
   let buffer = input('Buffer no: ')
   call inputrestore()
   exec ':b' . buffer
endfunction

" Buffer Leader mappings
map <leader>b :bn!<cr>
map <leader>l :call List_and_goto_buffers()<cr>


" Change inner word to contents of anonymous buffer
nmap <silent> cp "_ciw<C-R>"jk

" Mock an ide environment - editor, file list, notes
function! Ide()
    exec ':vsplit'
    exec ':vertical resize 20'
    exec ':wincmd l'
    exec ':split'
    exec ':wincmd j'
    exec ':resize 10'
    exec ':wincmd h'
    exec ':Explor'
endfunction
command! Ide call Ide()


" git pull and reload all buffers
fun! PullAndRefresh()
  set noconfirm
  !git pull
  bufdo e!
  set confirm
endfun
"
" Not ready for a short cut yet
"nmap <leader>gr call PullAndRefresh()

" pip install jsbeautifier
" Proper formatting of javascript
"autocmd FileType javascript setlocal equalprg=js-beautify\ --stdin


nnoremap <silent> <leader>e :call JSFormat()<cr>

function! JSFormat()
  " Preparation: save last search, and cursor position.
  let l:win_view = winsaveview()
  let l:last_search = getreg('/')

  " call esformatter with the contents form and cleanup the extra newline
  execute ":%!~/.vim/bin/js-format.sh"
  if v:shell_error
      echoerr 'format script failed'
      undo
      return 0
  endif
  " Clean up: restore previous search history, and cursor position
  call winrestview(l:win_view)
  call setreg('/', l:last_search)
endfunction

set noautochdir

nnoremap <F4> :TlistToggle<CR>
nnoremap <F8> :!/opt/local/bin/ctags -R **/*.py<CR>
autocmd FileType python set omnifunc=pythoncomplete#Complete
" Only works on a mac
map ˚ :wincmd h<CR>k<CR>
map ∆ :wincmd h<CR>j<CR>




"" Leader short cuts to grow
map <leader>pmain iif __name__ == "__main__":jkomain(sys.argv[1:])


set wildignore=.o,.obj,.git,node_modules/**,app/node_modules/**
let g:CommandTTraverseSCM='pwd'
